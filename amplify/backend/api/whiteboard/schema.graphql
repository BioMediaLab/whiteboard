type Query {
  listStudents: [Student] @function(name: "StudentsResolver-${env}")
  listInstructors: [Instructor] @function(name: "InstructorsResolver-${env}")
}
type Course
  @model
  @key(name: "ByCourseId", fields: ["courseId", "createdAt"])
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "professor", "teacher_assistant"] }
      { allow: groups, groupsField: "enrollments", operations: [read] }
    ]
  ) {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  courseId: String!
  title: String!
  description: String
  semester: Semester
  settings: [KeyValue]
  quizzes: [Quiz] @connection(name: "CourseQuizzes")
  enrollments: [String]
  instructor: Instructor
  quizAttempts: [QuizAttempt] @connection(name: "CourseQuizAttempts")
}

type Quiz
  @model(queries: { get: "getQuiz", list: "listQuizzes" })
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "professor", "teacher_assistant"] }
      { allow: groups, groups: ["student"], operations: [read] }
    ]
  ) {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  title: String!
  description: String
  course: Course @connection(name: "CourseQuizzes")
  questions: [Question]
  settings: [KeyValue]
}

type Student {
  id: ID
  family_name: String
  middle_name: String
  given_name: String
  username: String
  email: AWSEmail
}

type Instructor {
  id: ID
  family_name: String
  middle_name: String
  given_name: String
  username: String
  email: AWSEmail
}

type QuizAttempt
  @model
  @auth(
    rules: [
      { allow: owner }
      {
        allow: groups
        groups: ["admin", "professor", "teacher_assistant"]
        operations: [read]
      }
    ]
  ) {
  id: String!
  student: Student!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  responses: [Response]
  questions: [Question]
  course: Course @connection(name: "CourseQuizAttempts")
}

type Question {
  key: Int
  question: String
  choices: [KeyValue]
  answers: [KeyValue]
    @auth(
      rules: [
        { allow: groups, groups: ["admin", "professor", "teacher_assistant"] }
        { allow: groups, groups: ["student"], operations: [null] }
      ]
    )
}

type Response {
  id: ID!
  question: String!
  choices: [KeyValue]
  answers: [KeyValue]
    @auth(
      rules: [
        { allow: owner }
        { allow: groups, groups: ["admin", "professor", "teacher_assistant"] }
      ]
    )
}

type QuestionBank
  @model
  @key(name: "ByCourseId", fields: ["courseId", "createdAt"])
  @auth(
    rules: [
      { allow: groups, groups: ["admin", "professor", "teacher_assistant"] }
    ]
  ) {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  title: String!
  courseId: String!
  description: String
  questions: [Question]
}

type KeyValue {
  key: String
  value: String
}

type Semester {
  season: Season
  year: Int
}

enum Season {
  spring
  fall
  summer
}
